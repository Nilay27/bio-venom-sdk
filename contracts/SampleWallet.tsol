pragma ever-solidity >= 0.61.0;
pragma AbiHeader expire;
import "./EllipticCurve.tsol";
import "locklift/src/console.tsol";
pragma ignoreIntOverflow;


/// @title Simple wallet
/// @author Tonlabs
contract Wallet is EllipticCurve{
    uint16 static _nonce;
    uint256 constant INVALID_SIGNATURE = 108;
    uint256 constant INVALID_NONCE = 109;

    struct UserOperation {
        uint _nonce;
        TvmCell _signature;
        TvmCell _payload;
        uint _value;
    }
    /*
     Exception codes:
      100 - message sender is not a wallet owner.
      101 - invalid transfer value.
     */
     address ellipticCurve;
     bool _signatureCheckInProgress;

     uint256 nonce;

    /// @dev Contract constructor.
     constructor() public{
        tvm.accept();
    }

    function encodeParameters(uint r, uint s, uint x1, uint y1, uint x2, uint y2) external view returns (TvmCell){
        TvmCell encodedXYCoordinatesAndSingnature =  abi.encode(r,s,x1,y1,x2,y2);
        return encodedXYCoordinatesAndSingnature;
    }

    

    function validate_signature(TvmCell _userOp_signature) public returns(bool){
        (uint r, uint s, uint x1, uint y1, uint x2, uint y2) = abi.decode(
            _userOp_signature,
            (uint, uint, uint, uint, uint ,uint)
        );
        bool result = validate_signatureWithXY(r,s, x1, y1, x2, y2);
        return result;
    }


    /// @dev Allows to transfer tons to the destination account.
    /// @param dest Transfer target address.
    /// @param value Nanotons value to transfer.
    /// @param bounce Flag that enables bounce message in case of target contract error.
    function sendTransaction(address dest, uint128 value, bool bounce, UserOperation userOp) external view {
        require(validate_signature(userOp._signature), INVALID_SIGNATURE);
        require(userOp._nonce == nonce, INVALID_NONCE);
         // Runtime function that allows to make a transfer with arbitrary settings.
        dest.transfer({value: userOp._value, bounce: bounce, flag: 0, body: userOp._payload});
        // to stop any kind of replay attacks
        nonce++;
    }
}