pragma ever-solidity >= 0.61.0;
pragma AbiHeader expire;
import "./EllipticCurve.tsol";
import "locklift/src/console.tsol";
pragma ignoreIntOverflow;


/// @title Simple wallet
/// @author Tonlabs
contract Wallet is EllipticCurve{
    uint16 static _nonce;
    uint256 constant INVALID_SIGNATURE = 108;
    uint256 constant INVALID_NONCE = 109;

    struct UserOperation {
        uint _nonce;
        TvmCell _signature;
        TvmCell _payload;
        uint128 _value;
    }
    /*
     Exception codes:
      100 - message sender is not a wallet owner.
      101 - invalid transfer value.
     */
     uint256 nonce;

     uint256 Q0;
     uint256 Q1;
    /// @dev Contract constructor.
     constructor(uint _Q0, uint _Q1) public{
        tvm.accept();
        Q0 = _Q0;
        Q1 = _Q1;
    }
    function encodeSignatureParams(uint r, uint s, uint x1, uint y1, uint x2, uint y2) external view returns (TvmCell){
        TvmCell encodedXYCoordinatesAndSingnature =  abi.encode(r,s,x1,y1,x2,y2);
        return encodedXYCoordinatesAndSingnature;
    }

    function encodeUserOperation(TvmCell _signatureOp, TvmCell _payloadOp, uint128 _valueOp) external view returns (TvmCell){
        UserOperation userOp = UserOperation(nonce, _signatureOp, _payloadOp, _valueOp);
        TvmCell encodedUserOperation =  abi.encode(userOp);
        return encodedUserOperation;
    }

    function checkQ1Q2(uint r, uint s, uint _x1, uint _y1) public view returns (bool){
        tvm.accept();
        uint256 sInv = inverseMod(s, n);
        (uint x1, uint y1) = multiplyScalar(Q0, Q1, mulDivMod(r, sInv, n));
        require(_x1==x1 && _y1==y1, 111);
        return true;
    }

    function validateSignature(TvmCell _userOpSignature) internal view returns(bool){
        tvm.accept();
        (uint r, uint s, uint x1, uint y1, uint x2, uint y2) = abi.decode(
            _userOpSignature,
            (uint, uint, uint, uint, uint ,uint)
        );
        bool result = validateSignatureWithXY(r,s, x1, y1, x2, y2);
        return result;
    }

    function getNonce() external view returns (uint256){
        return nonce;
    }


    /// @dev Allows to transfer tons to the destination account.
    /// @param dest Transfer target address.
    /// @param value Nanotons value to transfer.
    /// @param bounce Flag that enables bounce message in case of target contract error.
    function sendTransaction(address dest, uint128 value, bool bounce, TvmCell userOp) external  {
        (uint _nonceOp, TvmCell _signatureOp, TvmCell _payloadOp, uint128 _valueOp) = abi.decode(
            userOp,
            (uint, TvmCell, TvmCell, uint128)
        );
        require(validateSignature(_signatureOp), INVALID_SIGNATURE);
        require(_nonceOp == nonce, INVALID_NONCE);
        tvm.accept();
         // Runtime function that allows to make a transfer with arbitrary settings.
        dest.transfer({value: value, bounce: bounce, flag: 0, body: _payloadOp});
        // to stop any kind of replay attacks
        nonce++;
    }
}